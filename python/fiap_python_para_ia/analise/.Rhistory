geom_bar(aes(Temp, fill=Temp))
ggplot(airquality, aes( x=Month, y=Wind) ) +
geom_point( size=1 ) + geom_density2d()
ggplot(airquality, aes( x=Month, y=Temp) ) +
geom_point( size=1 ) + geom_density2d()
ggplot(airquality, aes( x=Wind, y=Temp) ) +
geom_point( size=1 ) + geom_density2d()
ggplot(temp, aes(pretest2, posttest2)) +
geom_hex( bins=30 )
ggplot(airquality, aes(Wind, Temp)) +
geom_hex( bins=30 )
ggplot(airquality, aes(Wind, Temp) ) +
geom_point() + geom_smooth()
library(plotly)
plot_ly(data = iris, x = ~Sepal.Length, y = ~Sepal.Width, color = ~Species)
airquality
?hist
hist(airquality$Ozone)
hist(airquality$Wind)
hist(airquality$Temp)
hist(airquality$Wind)
hist(airquality$Ozone)
hist(airquality$Solar.R)
getwd()
read.csv('megasena.csv')
megasena <- read.csv('megasena.csv')
megasena <- read.csv('megasena.csv', sep = ';')
head(megasena)
hist(megasena$D1)
hist(megasena$D2)
hist(megasena$D3)
hist(megasena$D1)
hist(megasena$D2)
hist(megasena$D3)
hist(megasena$D4)
hist(megasena$D5)
hist(megasena$D6)
hist(megasena$D1) # Entre 1 e 10
hist(megasena$D2) # Entre 5 e 20
hist(megasena$D1) # Entre 1 e 10
hist(megasena$D2) # Entre 5 e 20
hist(megasena$D3) # Entre 15 e 35
megasena[D1 == 5]
megasena[megasena$D1 == 5]
megasena['D1' == 5]
library(dplyr)
filter(megasena, D1 == 5)
vetor <- c(1:12, 5:20, 15:35, 30:45, 40:55, 47:60)
vetor
sample(vetor, replace = F, size = 6)
order_by(sample(vetor, replace = F, size = 6))
order(sample(vetor, replace = F, size = 6))
order(sample(vetor, replace = F, size = 6))
order(sample(vetor, replace = F, size = 6))
hist(megasena$D6) # Entre 47 e 60
hist(megasena$D1) # Entre 1 e 12
hist(megasena$D2) # Entre 5 e 20
hist(megasena$D2 - megasena$D1)
hist(megasena$D3 - megasena$D2)
class(megasena$D2)
hist(megasena$D4 - megasena$D3)
megasena <- read.csv('megasena.csv', sep = ';')
hist(megasena$D5 - megasena$D4)
hist(megasena$D6 - megasena$D5)
hist(megasena$D1 == 7)
hist(filter(megasena, megasena$D1 == 7))
hist(teste$D1)
megasena %>%  filter(megasena$D1 == 7) -> teste
hist(teste$D1)
teste$D1
df <- data.frame("a", "b", "c")
df
colnames(df) <- c("coluna a", "coluna b", "coluna c")
df
nomesColunas <- c("coluna a", "coluna b", "coluna c")
clear()
clear
glimpse(mtcars)
airquality %>% filter(Month == 5 & !is.na(Ozone)) %>% arrange(Ozone) %>% select(Ozonio = Ozone) -> ozonio
library(ggplot2)
library(leaflet)
library(dplyr)
library(plotly)
library(lubridate)
library(corrplot)
library(readxl)
v1 <- c(1, 2, 3);
v2 <- c(T, F, T);
v3 <- c("a", "b", "c");
lista <- list(v1, v2, v3)
class(lista)
lista
glimpse(mtcars)
sexo <- c("Feminino", "Masculino","Feminino", "Masculino","Feminino", "Masculino","Feminino", "Masculino","Feminino", "Masculino")
fatorado <- as.factor(sexo);
fatorado
v1 <- c(1, 2, 3);
v2 <- c(T, F, T);
v3 <- c("a", "b", "c");
lista <- list(v1, v2, v3)
class(lista)
lista
matriz <- matrix(ncol = 5, nrow = 5, data = 1:5)
matriz
matriz <- matrix(ncol = 6, nrow = 5, data = 1:5)
matriz
matrizA <- matrix(ncol = 5, nrow = 5, data = 1:5)
matrizB <- matrix(ncol = 5, nrow = 5, data = 1:5)
# Esta operação abaixo não é uma multiplicação de matrizes, é apenas uma multiplicação de valores.
matriz <- matrizA * matrizB
matriz
linhas <- 5
colunas <- 10
matrizA <- matrix(ncol = linhas, nrow = colunas, data = 1:2)
matrizB <- matrix(ncol = colunas, nrow = linhas, data = 1:2)
matrizA %*% matrizB
matrizA <- matrix(ncol = 2, nrow = 2, data = 1:4)
dim(matrizA)  #inversa, esta deve ser quadrada
t(matrizA) #transposta
diag(matrizA) #identidade
solve(matrizA)  #inversa, esta deve ser quadrada
matrizA <- cbind(matrizA, c(5,2)) #Adiciona colunas no fim da matriz
matrizA #Colunas adicionadas
matrizA <- rbind(matrizA, c(5,2, 3))
matrizA #Linhas adicionadas
airquality %>% filter(Month == 5 & !is.na(Ozone)) %>% arrange(Ozone) %>% select(Ozonio = Ozone) -> ozonio
ozonio %>% summary() %>% as.list() -> valores
plot(ozonio$Ozonio)
minimo <- min(teste$Ozonio)
maximo <- max(teste$Ozonio)
media <- mean(teste$Ozonio)
mediana <- median(teste$Ozonio)
quartil <- quantile(teste$Ozonio)
lines(c(0, 30), c(minimo, minimo), col = 'blue')
lines(c(0, 30), c(maximo, maximo), col = 'blue')
lines(c(0, 30), c(media, media), col = 'blue')
lines(c(0, 30), c(mediana, mediana), col = 'red')
lines(c(0, 30), c(11.00, 11.00), col = 'blue')
airquality %>% filter(Month == 5 & !is.na(Ozone)) %>% arrange(Ozone) %>% select(Ozonio = Ozone) -> ozonio
ozonio %>% summary() %>% as.list() -> valores
plot(ozonio$Ozonio)
minimo <- min(teste$Ozonio)
maximo <- max(teste$Ozonio)
media <- mean(teste$Ozonio)
mediana <- median(teste$Ozonio)
quartil <- quantile(teste$Ozonio)
lines(c(0, 30), c(minimo, minimo), col = 'blue')
lines(c(0, 30), c(maximo, maximo), col = 'blue')
lines(c(0, 30), c(media, media), col = 'blue')
lines(c(0, 30), c(mediana, mediana), col = 'red')
lines(c(0, 30), c(11.00, 11.00), col = 'blue')
#exibir duas linhas e duas colunas
par(mfrow=c(2,2))
boxplot(airquality$Ozone~airquality$Solar.R)
boxplot(airquality$Ozone~airquality$Wind)
hist(airquality$Ozone)
hist(airquality$Wind)
set.seed(1909)
x <- rnorm(15, mean = rep(1:3, each = 5), sd = 0.2)
y <- rnorm(15, mean = rep(c(1,2), each = 5), 0.2)
plot(x, y, col = 'blue', pch = 8, cex = 1)
text(x + 0.05, y + 0.05, labels = as.character(1:15))
df <- data.frame(x, y)
nclusters <- 3
modelo <- kmeans(x = df, centers = nclusters, iter.max = 5)
plot(x,y,col= modelo$cluster, pch = 19, cex=2);
points(modelo$centers, col=1:nclusters, pch = 3, cex=3, lwd = 2)
set.seed(1909)
velocidade <- rnorm(15, mean = rep(1:3, each = 5), sd = 0.2)
vento <- rnorm(15, mean = rep(c(1,2), each = 5), 0.2)
altura <- rnorm(15, mean = rep(c(1,2), each = 5), 0.2)
df <- data.frame(velocidade, vento, altura)
nclusters <- 4
modelo <- kmeans(x = df, centers = nclusters, iter.max = 5)
plot(df,col= modelo$cluster, pch = 19, cex=2);
#Pontos apenas funciona em plot único.
points(modelo$centers, col=1:nclusters, pch = 3, cex=3, lwd = 2)
set.seed(1909)
x <- rnorm(15, mean = rep(1:3, each = 5), sd = 0.2)
y <- rnorm(15, mean = rep(c(1,2), each = 5), 0.2)
plot(x, y, col = 'blue', pch = 8, cex = 1)
text(x + 0.05, y + 0.05, labels = as.character(1:15))
df <- data.frame(x, y)
nclusters <- 3
modelo <- kmeans(x = df, centers = nclusters, iter.max = 5)
plot_ly(df,
x = ~x,
y = ~y,
type = 'scatter', mode ='markers',color = modelo$cluster)
set.seed(1909)
velocidade <- rnorm(15, mean = rep(1:50, each = 5), sd = 0.2)
vento <- rnorm(15, mean = rep(c(1,25), each = 5), 0.2)
altura <- rnorm(15, mean = rep(c(1,25), each = 5), 0.2)
df <- data.frame(velocidade, vento, altura)
nclusters <- 4
modelo <- kmeans(x = df, centers = nclusters, iter.max = 5)
plot_ly(df,
x = ~velocidade,
y = ~vento,
z= ~altura,
type = 'scatter3d', mode ='markers',color = modelo$cluster)
vetorA <- c(1,5,4,7)
vetorB <- c("Olá mundo")
dataframe <- data.frame(vetorA, vetorB)
# Colocando nomes nas colunas
colnames(dataframe) <- c("Numérico", "Texto")
dataframe
lista <- list(c(1,2), c(T,F), c("teste", "teste2"))
dataframe <- data.frame(lista)
dataframe
data.texto = "13/11/2018 T 19:10:00"
data.date = as.Date(data.texto,format="%d/%m/%Y T %H:%M:%S",tz="America/Sao_Paulo")
data.time1 = as.POSIXct(data.texto,format="%d/%m/%Y T %H:%M:%S",tz="America/Sao_Paulo")
data.time2 = as.POSIXlt(data.texto,format="%d/%m/%Y T %H:%M:%S",tz="America/Sao_Paulo")
data.time1
data.time2
data.date
data.texto = "23/08/2019 T 19:10:00"
data.date = as.Date(data.texto,format="%d/%m/%Y T %H:%M:%S",tz="America/Sao_Paulo")
data.time1 = as.POSIXct(data.texto,format="%d/%m/%Y T %H:%M:%S",tz="America/Sao_Paulo")
data.time2 = as.POSIXlt(data.texto,format="%d/%m/%Y T %H:%M:%S",tz="America/Sao_Paulo")
data.time1
data.time2
data.date
unclass(data.date)
unclass(data.time1) #Time1
unclass(data.time2) #Time2
Sys.Date()
segundos  = dseconds(260)
minutos  = dminutes(260)
anos  = dyears(260)
duration(10, units = "seconds")
segundos
minutos
anos
#abaixo as funções de data
#Ano mes dia
data <- ymd("20190101")
# Dia mes ano hora
dmy_h("1110201810")
# Retorna o dia da semana
wday(data, label = T)
#Gerando números de 1 a 10
1:10
#Gerando números de 10 a 1
10:1
#Gerando números de 100 a 120
seq(100, 120)
#Gerando 10 números a partir de 100
seq(100, length.out = 10)
#Gerando números de 10 a 20 de 2 em 2
seq.int(from = 10, to = 20, by = 2)
#Gerando 20 números
seq_len(20)
#Gerando um vetor do mesmo tamanho que o vetor passado
seq_along(c(70, 2))
#Repetindo o número 4 5 vezes
rep(4, times = 5)
itens <- c(10,20,30)
for (variable in itens) {
print(variable)
}
Niltinho <- [4, 4, 4, 1, 4, 3, 3, 4, 3, 3, 1, 1, 5, 4, 3, 4, 2]
Expresso <- [5, 5, 5, 5, 4, 4, 4, 3, 1, 5, 5, 5]
Gourmet <- [2, 3 ,1, 4, 2, 4, 4, 4, 5, 5, 1, 5, 2, 4, 4, 5]
Niltinho <- c(4, 4, 4, 1, 4, 3, 3, 4, 3, 3, 1, 1, 5, 4, 3, 4, 2)
Expresso <- c(5, 5, 5, 5, 4, 4, 4, 3, 1, 5, 5, 5)
Gourmet <- c(2, 3 ,1, 4, 2, 4, 4, 4, 5, 5, 1, 5, 2, 4, 4, 5)
median(Niltinho)
median
?median
Niltinho <- c(4, 4, 4, 1, 4, 3, 3, 4, 3, 3, 1, 1, 5, 4, 3, 4, 2)
Expresso <- c(5, 5, 5, 5, 4, 4, 4, 3, 1, 5, 5, 5)
Gourmet <- c(2, 3 ,1, 4, 2, 4, 4, 4, 5, 5, 1, 5, 2, 4, 4, 5)
median(Niltinho)
median(Expresso)
median(Gourmet)
Niltinho <- c(4, 4, 4, 1, 4, 3, 3, 4, 3, 3, 1, 1, 5, 4, 3, 4, 2)
Expresso <- c(5, 5, 5, 5, 4, 4, 4, 3, 1, 5, 5, 5)
Gourmet <- c(2, 3 ,1, 4, 2, 4, 4, 4, 5, 5, 1, 5, 2, 4, 4, 5)
mean(Niltinho)
mean(Expresso)
mean(Gourmet)
10*180
6*150
10*80
800+900
20*175
3500-1700
1800/4
132000/11
132000*0,1
132000*0.1
12000*0.1
12000-1200
132000-10800
121200/10
12120-10800
132000 - 10800
121200/10
12120 - 10800
132000/11
12000-10800
12000-10900
source('~/.active-rstudio-document')
x = c(50, 100)
y= y(70, 89)
plot(x, y)
x = c(50, 100)
y= c(70, 89)
plot(x, y)
x = c(50, 100, 80)
y= c(70, 89, 84)
plot(x, y)
72*8
9*6
48/8
46/8
1/8
1/6
1/5
3/23
4/23
1/8
8/48
8/46
0.17 * 2
1/6
1/5
3/23
4/23
for (a in c(1:1000)) {
if(a % 5 == 3 && a % 7 == 4)
{
print(a)
break
}
}
for (a in c(1:1000)) {
if(a %% 5 == 3 && a %% 7 == 4)
{
print(a)
break
}
}
0.16/0.44
2/27
3/2
3/4
3/8
9/16
1.6 / 4/4
0.1666666666/0.44444444
ano1 = (10000*0.05) + 10000
ano2 = (ano1*0.05) + ano1
ano3 = (ano2*0.05) + ano2
ano4 = (ano3*0.05) + ano3
ano5 = (ano4*0.05) + ano4
ano4 - ano3
ano5 - ano4
578/607
100^4 / 105^4
1/5
625/3125
725/3225
10/189
15/196
soma = 0
for (variable in 1:999) {
soma+= variable
}
soma = 0
for (variable in 1:999) {
soma += variable
}
soma = 0
for (variable in 1:999) {
soma = variable + soma
}
soma
2/3
0.66/2
0.5+0.3
1200+3000
4200/60
1200*50
3000*10
60000+30000
90000/60
99^99
99^99 * 44^44 * 66^66
pluv = c(110, 100, 60, 80, 70, 18, 17, 17, 42, 89, 108, 143)
irmaos = c(0,1,2,0,0,2,4,1,2,3,2,1,1,1,1,0,0,0,1,2,3,4,2,2,1,1,0,1,0,1,0,1,0,2,1,1,2,0,1,1)
summary(pluv)
summary(irmaos)
table(irmaos)
transform(table(irmaos))
transform(table(irmaos), FreqRel = Freq/40)
transform(table(irmaos), FreqRel = Freq/40, FreqAcum = cumsum(Freq))
transform(table(irmaos), FreqRel = Freq/40, FreqAcum = cumsum(Freq), FreqRelAcum = cumsum(Freq)/40)
table(pluv)
table(cut(pluv, breaks = pretty(pluv, n = 4)))
table(cut(pluv, breaks = pretty(pluv, n = 4),right = FALSE))
transform(table(cut(pluv, breaks = pretty(pluv, n = 4))))
transform(table(cut(pluv, breaks = pretty(pluv, n = 4))),FreqRel = Freq/12, FreqAcum = cumsum(Freq), FreqRelAcum = cumsum(Freq)/12)
table(pibpercap)
pluv2 = c(110, 100, 60, 80, 70, 18, 17, 0, 42, 89, 108, 143)
transform(table(cut(pluv2, breaks = pretty(pluv2, n = 4))))
transform(table(cut(pluv2, breaks = pretty(pluv2, n = 4), include.lowest = TRUE)))
transform(table(cut(pluv, breaks = pretty(pluv, n = 6))))
transform(table(cut(pluv, breaks = c(0,40,80,120,160))))
barplot(table(irmaos))
barplot(table(irmaos), space = 0, names.arg = c("zero","um","dois","tres","quatro"), main = "Distribuicao do nr. de irmaos", xlab = "Numero de irmaos", ylab = "Frequencia absoluta", cex.axis = 1.5, cex.names = 1.2)
pie(table(irmaos))
pie(table(irmaos), labels = c("zero","um","dois","tres","quatro"), radius = 1.05, col = c("blue1","bisque2","brown3","chartreuse1","deeppink1"), main = "Nr. de irmaos")
hist(pluv, breaks = 4)
hist(pluv, breaks = c(0,40,80,120,160))
pie(table(cut(pluv, breaks = c(0,40,80,120,160))))
mean(pluv)
mean(irmaos)
sd(irmaos)
sd(pluv)
var(irmaos)
var(pluv)
median(irmaos)
median(pluv)
summary(pluv)
summary(irmaos)
len(irmaos)
length(irmaos)
pluv = c(110, 100, 60, 80, 70, 18, 17, 17, 42, 89, 108, 143)
irmaos = c(0,1,2,0,0,2,4,1,2,3,2,1,1,1,1,0,0,0,1,2,3,4,2,2,1,1,0,1,0,1,0,1,0,2,1,1,2,0,1,1)
summary(pluv)
summary(irmaos)
1/9
1- (1/9)
8/9
pluv = c(110, 100, 60, 80, 70, 18, 17, 17, 42, 89, 108, 143)
irmaos = c(0,1,2,0,0,2,4,1,2,3,2,1,1,1,1,0,0,0,1,2,3,4,2,2,1,1,0,1,0,1,0,1,0,2,1,1,2,0,1,1)
summary(pluv)
?t
getwd()
setwd('C:\Users\sergio.prates\fiap_python\analise')
setwd('C:/Users/sergio.prates/fiap_python/analise')
getwd()
dados <- read.csv('PESQUISA_IA .csv')
summary(dados)
summary(dados)
is.na(dados)
pluv = c(110, 100, 60, 80, 70, 18, 17, 17, 42, 89, 108, 143)
irmaos = c(0,1,2,0,0,2,4,1,2,3,2,1,1,1,1,0,0,0,1,2,3,4,2,2,1,1,0,1,0,1,0,1,0,2,1,1,2,0,1,1)
View(dados)
colnames(dados) <- c('Data', 'Tempo', 'Distancia', 'Transporte')
View(dados)
?t.test
t.test(dados$Tempo, mu = 30, alternative = 'greater')
t.test(dados$Tempo, mu = 30, alternative = 'less')
t.test(dados$Tempo, mu = 30)
t.test(dados$Tempo, mu = 30, alternative = 'greather')
t.test(dados$Tempo, mu = 30, alternative = 'less')
t.test(dados$Tempo, mu = 30, alternative = 'less')
t.test(dados$Tempo, mu = 30, alternative = 'greather')
t.test(dados$Tempo, mu = 30, alternative = 'greather')
dados <- read.csv('PESQUISA_IA.csv')
getwd()
dados <- read.csv('PESQUISA_IA.csv')
dados <- read.csv('PESQUISA_IA .csv')
summary(dados)
colnames(dados) <- c('Data', 'Tempo', 'Distancia', 'Transporte')
View(dados)
t.test(dados$Tempo, mu = 30, alternative = 'greather')
colnames(dados) <- c('Data', 'Tempo', 'Distancia', 'Transporte')
t.test(dados$Tempo, mu = 30, alternative = 'greather')
t.test(dados$Tempo, mu = 30, alternative = 'greater')
t.test(dados$Tempo, mu = 30, alternative = 'greater')
t.test(dados$Tempo, mu = 30, alternative = 'less')
t.test(dados$Tempo, mu = 30, alternative = 'greater')
t.test(dados$Tempo, mu = 30, alternative = 'greater')
t.test(dados$Tempo, mu = 30, alternative = 'less')
t.test(dados$Tempo, mu = 30, alternative = 'greater')
t.test(dados$Tempo, mu = 30)
t.test(dados$Tempo, mu = 30, alternative = 'greater')
summary(dados)
mean(dados$Tempo)
t.test(dados$Tempo, mu = 30, alternative = 'less')
length(dados)
View(dados)
hist(dados$Tempo)
boxplot(dados$Tempo)
plot(dados$Tempo)
hist(dados$Tempo)
boxplot(dados$Tempo)
hist(megasena)
hist(megasena$D1)
hist(megasena$D1, megasena$D2)
hist(megasena$D1)
teste <- paste(megasena$D1, '_', megasena$D2)
hist(teste)
teste <- paste(megasena$D1, '_', megasena$D2,sep = '')
hist(teste)
?teste
teste
hist(teste)
teste2 <- c(2,3,2)
hist(teste2)
teste2 <- c('2','3','2')
hist(teste2)
teste <- as.factor(paste(megasena$D1, '_', megasena$D2,sep = ''))
hist(teste)
teste <- as.int(as.factor(paste(megasena$D1, '_', megasena$D2,sep = '')))
teste <- as.integer(as.factor(paste(megasena$D1, '_', megasena$D2,sep = '')))
hist(teste)
